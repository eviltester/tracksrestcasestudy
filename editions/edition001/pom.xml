<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>compendiumdev.co.uk</groupId>
    <artifactId>TracksApiCaseStudy</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>

        <!-- if you are using Java 1.7 or 1.8,
             which the case study was written against,
             then version 3.0.1 of rest-assured will work.

             If you are using Java 1.9 then,
                at the time of writing this comment 20180409,
             The version of rest-assured needs to be 3.0.7

             Since, I'm assuming most people will be using Java 1.9 I have
             updated the source to use version 3.0.7 of RestAssured.

             Although when I do this I have failing tests in some of the RestAssured XML serialisation examples,
             not sure why yet.
              -->

        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>3.0.7</version>
        </dependency>



        <!-- Added the following dependencies when running 3.0.7 against Java 1.9

            To fix the following tests

            -  `anXmlAPISerializationExample`
            - `aSetOfXmlPathExamples`
            - `anXmlAPIDeserializationExample`
            - `anXmlDeserializationExample`
            - `anXmlDeserializationExampleFromUrl`

            They do not appear to impact Java 1.8 but if you experience issues you can remove them
            I did not need these when running on Java 1.7 or Java 1.8 against version 3.0.1 of Rest Assured
        -->

        <!--
        To remove the error

        ~~~~~~~~
        java.lang.RuntimeException: javax.xml.bind.JAXBException
         - with linked exception:
        [java.lang.ClassNotFoundException: com.sun.xml.internal.bind.v2.ContextFactory]
        ~~~~~~~~
        -->
        <dependency>
            <groupId>com.sun.xml.bind</groupId>
            <artifactId>jaxb-impl</artifactId>
            <version>2.3.0</version>
        </dependency>

        <!--
        To remove the error

        ~~~~~~~~
        java.lang.NoClassDefFoundError: com/sun/xml/bind/v2/model/annotation/AnnotationReader
        ~~~~~~~~
        -->
        <dependency>
            <groupId>com.sun.xml.bind</groupId>
            <artifactId>jaxb-core</artifactId>
            <version>2.3.0</version>
        </dependency>

        <!--
        And to remove the error:

        ~~~~~~~~
        java.lang.NoClassDefFoundError: javax/activation/DataSource
        ~~~~~~~~
        -->
        <dependency>
            <groupId>javax.activation</groupId>
            <artifactId>activation</artifactId>
            <version>1.1.1</version>
        </dependency>


        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
        </dependency>

        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.8.1</version>
        </dependency>


    </dependencies>

    <build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
                <source>1.7</source>
                <target>1.7</target>
            </configuration>
        </plugin>
    </plugins>
    </build>

</project>